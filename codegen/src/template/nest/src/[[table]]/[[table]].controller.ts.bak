import { Body, Controller, Get, Post, Query, Res, SetMetadata, UseGuards, UseInterceptors } from '@nestjs/common';
import { Context } from "../common/context";
import { ContextDc } from '../common/interceptors/context.interceptor';
import { AuthGuard } from '../common/auth/auth.guard';
import { PageModel } from '../common/page.model';
import { TENANT_ID } from '../common/auth/auth.constants';

import { <#=tableUp#>Service } from './<#=table#>.service';

@Controller()
@SetMetadata(TENANT_ID, true)
@UseGuards(AuthGuard)
export class <#=tableUp#>Controller {
  
  constructor(
    private readonly <#=table#>Service: <#=tableUp#>Service,
  ) { }
  
  /**
   * 根据条件查找总记录数
   * @param {Context} context
   * @param {{ [key:string]: string }} search
   * @return {Promise<number>}
   * @memberof <#=tableUp#>Controller
   */
  @Get("findCount<#=tableUp#>")
  async findCount(
    @ContextDc() context: Context,
    @Query() search: { [key:string]: string },
  ): Promise<number> {
    const t = this;
    const data = await t.<#=table#>Service.findCount(context, search);
    return data;
  }
  
  /**
   * 根据条件和分页查找记录列表
   * @param {Context} context
   * @param {({ [key:string]: string } & PageModel)} search
   * @return {Promise<any[]>}
   * @memberof <#=tableUp#>Controller
   */
  @Get("findAll<#=tableUp#>")
  async findAll(
    @ContextDc() context: Context,
    @Query() search: { [key:string]: string } & PageModel,
  ): Promise<any[]> {
    const t = this;
    const data = await t.<#=table#>Service.findAll(context, search);
    return data;
  }
  
  /**
   * 根据条件查找第一条记录
   * @param {Context} context
   * @param {{ [key:string]: string }} search
   * @return {Promise<any>}
   * @memberof <#=tableUp#>Controller
   */
  @Get("findOne<#=tableUp#>")
  async findOne(
    @ContextDc() context: Context,
    @Query() search: { [key:string]: string },
  ): Promise<any> {
    const t = this;
    const data = await t.<#=table#>Service.findOne(context, search);
    return data;
  }
  
  /**
   * 根据id查找一条记录
   * @param {Context} context
   * @param {string} id
   * @return {Promise<any>}
   * @memberof <#=tableUp#>Controller
   */
  @Get("findById<#=tableUp#>")
  async findById(
    @ContextDc() context: Context,
    @Query("id") id: string,
  ): Promise<any> {
    const t = this;
    const data = await t.<#=table#>Service.findById(context, id);
    return data;
  }
  
  /**
   * 增加一条记录
   * @param {Context} context
   * @param {*} model
   * @return {Promise<boolean>}
   * @memberof <#=tableUp#>Controller
   */
  @Post("create<#=tableUp#>")
  async create(
    @ContextDc() context: Context,
    @Body() model: any,
  ): Promise<boolean> {
    const t = this;
    const data = await t.<#=table#>Service.create(context, model);
    return data;
  }
  
  /**
   * 根据id修改一条记录
   * @param {Context} context
   * @param {string} id
   * @param {*} model
   * @return {Promise<boolean>}
   * @memberof <#=tableUp#>Controller
   */
  @Post("updateById<#=tableUp#>")
  async updateById(
    @ContextDc() context: Context,
    @Body("id") id: string,
    @Body() model: any,
  ): Promise<boolean> {
    const t = this;
    const data = await t.<#=table#>Service.updateById(context, id, model);
    return data;
  }
  
  /**
   * 根据id删除一条记录
   * @param {Context} context
   * @param {string[]} ids
   * @return {Promise<number>}
   * @memberof <#=tableUp#>Controller
   */
  @Post("deleteByIds<#=tableUp#>")
  async deleteByIds(
    @ContextDc() context: Context,
    @Body("ids") ids: string[],
  ): Promise<number> {
    const t = this;
    const data = await t.<#=table#>Service.deleteByIds(context, ids);
    return data;
  }
  
  /**
   * 导出excel
   * @param {Context} context
   * @param {*} res
   * @param {{ [key:string]: string }} search
   * @return {*} 
   * @memberof <#=tableUp#>Controller
   */
  @Get("exportExcel<#=tableUp#>")
  async exportExcel(
    @ContextDc() context: Context,
    @Res() res: any,
    @Query() search: { [key:string]: string },
  ): Promise<void> {
    const t = this;
    res = res.raw;
    try {
      const data = await t.<#=table#>Service.exportExcel(context, search);
      if (!data) {
        res.send();
        return;
      }
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader("Cache-Control", "no-cache");
      res.setHeader("Content-Disposition", `attachment; filename=${ encodeURIComponent("<#=table_comment#>") }.xlsx`);
      res.setHeader("Content-Length", data.length);
      res.write(data);
      res.end();
    } catch (err) {
      res.setHeader("Content-Type", "text/plain");
      res.setHeader("Content-Disposition", `attachment; filename=${ encodeURIComponent("<#=table_comment#>-错误") }.txt`);
      res.setHeader("Cache-Control", "no-cache");
      res.setHeader("Content-Length", err.message.length);
      res.write(err.message);
      res.end();
    }
  }
  
}
